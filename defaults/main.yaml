---
harbor_release: 2.4.2
harbor_url: "https://github.com/goharbor/harbor/releases/download/v{{ harbor_release }}/harbor-offline-installer-v{{ harbor_release }}.tgz"

#harbor_installer_extra_args:
harbor_extras:
  # - clair
  # - notary

# Will create harbor folder inside
harbor_install_dir: /opt
# This is related to the internal Nginx. If you are running it behind a proxy that terminates
# SSL, leave this on http. You will want to set `harbor_registry_realm_protocol` to "https", though.
harbor_ui_url_protocol: "http"
harbor_max_job_workers: 10
harbor_port: 80

# set to yes if you are running harbor behind an Nginx proxy
# or elastic load balancing. This will remove the line
# proxy_set_header X-Forwarded-Proto $scheme;
# from Harbor's nginx configuration according to the troubleshooting section.
# https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md#troubleshooting
# REMEMBER to put this line on YOUR proxy configuration, though.
harbor_behind_proxy: no

# If you are running behind a proxy and the proxy terminates SSL, you need to set this to "https"
# as this dictates the *external* access to the registry.
# This only takes effect if "harbor_behind_proxy" is True.
harbor_registry_realm_protocol: "http"

# Used in the docker compose file
harbor_exposed_http_port: 80
harbor_exposed_https_port: 443
harbor_install: true
harbor_self_registration: "on"
validate_certs: yes

# change these if you have your own redis running already
harbor_redis_host: redis

# If you have Harbor running on say "myregistry.company.com", that's what you should have as harbor_hostname
harbor_hostname: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
harbor_datadir: "/data"
harbor_ssl_self_days: 180
harbor_ssl_self_subject: "/O=Harbor Server/OU=Self signed/CN=test"
harbor_api_port: "{% if harbor_ui_url_protocol == 'http' %}{{harbor_exposed_http_port}}{% else %}{{harbor_exposed_https_port}}{% endif %}"
# If you are running Harbor behind your own proxy, override this as it might not match with Harbor.cfg values.
harbor_api_url: "{{ harbor_ui_url_protocol }}://{{ harbor_hostname }}:{{ harbor_api_port }}/api/v2.0"

# Example to create project on install
# harbor_projects:
#   - project_name: test
#     is_public: "false"
#     content_trust: "false"
#     prevent_vul: "true"
#     severity: "high"
#     auto_scan: "true"


#harbor_installer_with: "{% for e in harbor_extras %} {{ '--with-%s'|format(e) }} {% endfor %}"
harbor_installer_with:
#harbor_extra_compose_files: "{% for e in harbor_extras %} + ['docker-compose.{{e}}.yml'] {% endfor %}"
harbor_extra_compose_files:
harbor_docker_compose_files: "['docker-compose.yml'] {{ harbor_extra_compose_files }} "

# ------------------------------------
#          CONFIG DEFAULTs
# ------------------------------------

# ---- PROJECTS ------
is_public: "true"
content_trust: "false"
prevent_vul: "true"
severity: "high"
auto_scan: "true"

# ---- REGISTRY ------
access_key: ""
access_secret: ""
credential_type: ""
insecure: true
description: ""

# ---- SYSTEM CONFIGURATION ------
auth_mode: "ldap_auth"
ldap_search_dn: "cn=admin,dc=michele.com"
ldap_search_password: ""
ldap_timeout: 0
ldap_base_dn: "michele.com"
ldap_filter: ""
ldap_url: "ldap://123.123.123.123"
ldap_uid: "cn"
ldap_verify_cert: false
ldap_group_search_filter: "objectclass=group"
# ldap_group_search_filter: "objectclass=groupOfNames" if OpenLDAP server is used instead of AD
ldap_group_membership_attribute: "memberof"
# ldap_group_membership_attribute: "ismemberof" for some LDAP servers
ldap_group_base_dn: "ou=groups,dc=michele,dc=com"
ldap_group_attribute_name: "cn"
ldap_group_admin_dn: ""
project_creation_restriction: "adminonly"
token_expiration: 30
session_timeout: 60
robot_name_prefix: "robot$"
robot_token_duration: 30
audit_log_forward_endpoint: ""
read_only: false
notification_enable: false




